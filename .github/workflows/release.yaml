name: Release  # 工作流程的名称

on:
  push:
    tags:
      - 'v*'  # 当有标签推送到仓库时触发此工作流程

jobs:
  release-bins:  # 第一个工作流程任务
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 系统作为运行环境

    steps:  # 任务步骤

      - uses: actions/checkout@v2  # 使用 GitHub 提供的 actions/checkout@v2 操作，将代码仓库内容检出到工作环境中

      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV  # 获取最新的 Git 标签并将其存储在 GitHub 环境变量中

      - uses: actions/setup-go@v2  # 设置 Go 编程语言的环境
        with:
          go-version: 1.19  # 指定 Go 的版本

      - run: go install github.com/golang/mock/mockgen@v1.6.0  # 安装指定版本的 mockgen 工具

      - uses: actions/setup-node@v2.4.0  # 设置 Node.js 环境

      - name: Build Web Page  # 步骤名称
        run: make build-web  # 执行构建 Web 页面的操作

      - name: Build go binaries  # 步骤名称
        run: make release  # 执行构建 Go 二进制文件的操作

      - uses: softprops/action-gh-release@v1  # 使用 softprops/action-gh-release 操作，用于发布 GitHub Release
        with:
          files: 'bin/*'  # 指定发布的文件路径
          prerelease: ${{ contains(env.GIT_TAG, 'rc') }}  # 如果标签中包含 'rc' 字符，则将其视为预发布版本

  release-docker-images:  # 第二个工作流程任务
    runs-on: ubuntu-latest  # 使用最新的 Ubuntu 系统作为运行环境
    needs:
      - release-bins  # 此工作流程任务依赖于 release-bins 任务的完成

    steps:  # 任务步骤

      - uses: actions/checkout@v2  # 使用 GitHub 提供的 actions/checkout@v2 操作，将代码仓库内容检出到工作环境中

      - run: echo "GIT_TAG=`echo $(git describe --tags --abbrev=0)`" >> $GITHUB_ENV  # 获取最新的 Git 标签并将其存储在 GitHub 环境变量中

      - run: if ! echo $GIT_TAG | grep "rc" >/dev/null; then DOCKER_TAGS=chigusa/bililive-go:$GIT_TAG,chigusa/bililive-go:latest; else DOCKER_TAGS=chigusa/bililive-go:$GIT_TAG; fi; echo "DOCKER_TAGS=$DOCKER_TAGS" >> $GITHUB_ENV  # 根据标签是否包含 'rc' 字符来设置 Docker 镜像的标签

      - name: Set up QEMU  # 步骤名称
        uses: docker/setup-qemu-action@v1  # 设置 QEMU 环境，用于构建多架构的 Docker 镜像

      - name: Docker Setup Buildx  # 步骤名称
        uses: docker/setup-buildx-action@v1.5.1  # 设置 Docker Buildx，用于构建多架构的 Docker 镜像

      - name: Log in to Docker Hub  # 步骤名称
        uses: docker/login-action@v1  # 登录到 Docker Hub，需要提供用户名和密码（通过 secrets 保护敏感信息）

          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build the Docker image  # 步骤名称
        uses: docker/build-push-action@v2.6.1  # 使用 Docker Buildx 构建和推送 Docker 镜像

        with:
          file: Dockerfile  # 指定 Dockerfile 的路径
          build-args: tag=${{ env.GIT_TAG }}  # 传递构建参数
          platforms: linux/amd64,linux/386,linux/arm64/v8,linux/arm/v7,linux/arm/v6  # 指定目标平台
          push: true  # 推送 Docker 镜像
          tags: ${{ env.DOCKER_TAGS }}  # 设置 Docker 镜像的标签
